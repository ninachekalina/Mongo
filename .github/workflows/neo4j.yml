name: Neo4j CI

on:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/neo4j.yml'
      - 'test_queries_neo4j.cql'
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/neo4j.yml'
      - 'test_queries_neo4j.cql'
  workflow_dispatch:
    inputs:
      query_key:
        description: 'key to extract query from artifact'
        required: false

jobs:
  test-neo4j:
    runs-on: ubuntu-latest
    services:
      neo4j:
        image: neo4j:5.10
        ports:
          - 7474:7474
          - 7687:7687
        env:
          NEO4J_AUTH: none
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install Cypher Shell
        run: |
          wget -qO cypher-shell.deb https://dist.neo4j.org/cypher-shell/cypher-shell_5.10.0_all.deb || \
          wget -qO cypher-shell.deb https://github.com/neo4j/cypher-shell/releases/download/1.1.15/cypher-shell_1.1.15_all.deb
          sudo dpkg -i cypher-shell.deb
          rm cypher-shell.deb

      - name: Check Neo4j CLI version
        run: cypher-shell --version

      - name: List running containers
        run: docker ps -a

      - name: Check running processes
        run: sudo netstat -tulnp  # Проверка портов

      - name: Wait for Neo4j to be ready
        run: |
          echo "Waiting for Neo4j service..."
          sleep 5
          for i in {1..30}; do
            STATUS=$(docker inspect --format="{{.State.Health.Status}}" $(docker ps -q --filter "ancestor=neo4j:5.10") 2>/dev/null)
            if [[ "$STATUS" == "healthy" ]]; then
              echo "Neo4j is ready!"
              exit 0
            fi
            echo "Waiting for Neo4j to start ($i/30)..."
            sleep 5
          done
          echo "Neo4j did not start in time."
          docker logs $(docker ps -q --filter "ancestor=neo4j:5.10")
          exit 1

      - name: Debug Neo4j Logs
        run: docker logs $(docker ps -q --filter "ancestor=neo4j:5.10")

      - name: Download Netflix dataset from Kaggle
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          pip install kaggle
          mkdir -p data
          kaggle datasets download -d chekalinanina/netflix-titles -p data --unzip
          ls -lah data/  # Проверка наличия скачанного файла

      - name: Check downloaded files
        run: ls -lah data/


      - name: Move dataset to Neo4j import directory
        run: |
          docker cp data/netflix_titles.csv $(docker ps -q --filter "ancestor=neo4j:5.10"):/var/lib/neo4j/import/netflix_titles.csv



      - name: Import Netflix dataset into Neo4j
        run: |
          cypher-shell -a bolt://localhost:7687 -u neo4j -p test "LOAD CSV WITH HEADERS FROM 'file:///netflix_titles.csv' AS row
          MERGE (s:Show {show_id: row.show_id})
          SET s.title = row.title, 
              s.type = row.type, 
              s.director = row.director,
              s.cast = row.cast,
              s.country = row.country,
              s.release_year = toInteger(row.release_year),
              s.rating = row.rating,
              s.duration = row.duration,
              s.listed_in = row.listed_in,
              s.description = row.description;"

      - name: Create relationships
        run: |
          cypher-shell -a bolt://localhost:7687 -u neo4j -p test "MATCH (s:Show) 
          WITH s, split(s.cast, ', ') AS actors
          UNWIND actors AS actor
          MERGE (a:Actor {name: actor})
          MERGE (a)-[:ACTED_IN]->(s);"

          cypher-shell -a bolt://localhost:7687 -u neo4j -p test "MATCH (s:Show) 
          WITH s, split(s.listed_in, ', ') AS genres
          UNWIND genres AS genre
          MERGE (g:Genre {name: genre})
          MERGE (s)-[:LISTED_IN]->(g);"



     

      

      - name: Save all query results to JSON
        run: |
          OUTPUT_FILE="/tmp/neo4j_output.json"
          echo "{" > $OUTPUT_FILE  # Начало JSON объекта

          function run_query {
            QUERY=$1
            NAME=$2
            RESULT=$(cypher-shell -a bolt://localhost:7687 -u neo4j -p test --format plain "$QUERY" | tail -n +2)
            # Преобразуем результат в JSON
            JSON_RESULT=$(echo "$RESULT" | jq -R -s -c 'split("\n") | map(select(length > 0)) | { (.[0]): .[1:] }')
            echo "\"$NAME\": $JSON_RESULT," >> $OUTPUT_FILE  # Записываем название запроса и результат в JSON
          }

          run_query "MATCH (s:Show) RETURN s.title, s.type LIMIT 10;" "show_titles"
          run_query "MATCH (s:Show) WHERE s.type = 'Movie' RETURN s.title LIMIT 10;" "movies_titles"
          run_query "MATCH (s:Show) RETURN s.listed_in, COUNT(*) AS count ORDER BY count DESC;" "categories_count"
          run_query "MATCH (s:Show) RETURN s.rating, COUNT(*) AS count ORDER BY count DESC;" "ratings_count"
          run_query "MATCH (s:Show) WHERE s.release_year > 2015 RETURN s.title, s.release_year;" "recent_shows"
          run_query "MATCH (s:Show) WHERE s.rating = 'PG-13' RETURN s.title;" "pg13_titles"
          run_query "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, COUNT(m) AS movies ORDER BY movies DESC;" "top_actors"
          run_query "MATCH (s:Show) WHERE s.duration IS NOT NULL RETURN avg(toInteger(s.duration)) AS avg_duration;" "average_duration"
          run_query "MATCH (s:Show) WHERE s.country = 'United States' RETURN s.title LIMIT 5;" "us_titles"
          run_query "MATCH (s:Show) RETURN s.release_year, COUNT(*) AS count ORDER BY count DESC;" "release_years_count"
          run_query "MATCH (s:Show) WHERE s.director IS NULL RETURN s.title LIMIT 5;" "no_director_titles"
          run_query "MATCH (s:Show) RETURN s.country, COUNT(*) AS count ORDER BY count DESC;" "country_count"
          run_query "MATCH (s:Show) RETURN s.listed_in, avg(toInteger(s.duration)) AS avg_duration ORDER BY avg_duration DESC;" "category_avg_duration"
          run_query "MATCH (s:Show) WHERE s.release_year = 2021 RETURN COUNT(s);" "count_2021_shows"
          run_query "MATCH (s:Show) WHERE s.description IS NOT NULL AND s.description <> '' RETURN s.description ORDER BY size(s.description) DESC LIMIT 5;" "longest_descriptions"
          run_query "MATCH (s:Show) RETURN s.title ORDER BY toInteger(s.duration) DESC LIMIT 5;" "longest_titles"
          run_query "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, collect(m.title) LIMIT 5;" "actors_with_movies"
          run_query "MATCH (s:Show) RETURN count(*) AS total_count;" "total_shows"
          run_query "MATCH (s:Show)-[:LISTED_IN]->(g:Genre) RETURN g.name, COUNT(s) ORDER BY COUNT(s) DESC LIMIT 5;" "top_genres"
          run_query "MATCH (s:Show)-[:LISTED_IN]->(g:Genre) RETURN g.name, avg(toInteger(s.duration)) AS avg_duration ORDER BY avg_duration DESC LIMIT 5;" "top_genres_avg_duration"
          run_query "MATCH (a:Actor)-[:ACTED_IN]->(m:Movie) RETURN a.name, COUNT(m) ORDER BY COUNT(m) DESC LIMIT 5;" "top_actors_movies"
          run_query "MATCH (s:Show)-[:DIRECTED_BY]->(d:Director) RETURN d.name, COUNT(s) ORDER BY COUNT(s) DESC LIMIT 5;" "top_directors"

          echo "}" >> $OUTPUT_FILE  # Закрытие JSON объекта
    


      - name: Debug Neo4j output file
        run: |
          ls -lah /tmp/
          cat /tmp/neo4j_output.json || echo "Файл пустой!"
      - name: Upload Neo4j results as JSON
        uses: actions/upload-artifact@v4
        with:
          name: neo4j-output
          path: /tmp/neo4j_output.json

    



     
